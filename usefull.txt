-------------  0 - TL;DR ---------------

# PROD URL:
http://51.254.221.25:8080


# Use db server (vps494554):
ssh lve@51.254.221.25
(not ssh lve@51.255.46.214)

# Connect on mongo (from app or db server):
# as admin:
mongo 51.254.221.25:27017/admin -u admin -p maniacPwd --authenticationDatabase admin --ssl --sslPEMKeyFile /etc/ssl/mongodb.pem --sslCAFile /etc/ssl/mongodb-cert.crt --sslAllowInvalidHostnames
# as regular user:
mongo 51.254.221.25:27017/food_maniac -u food -p maniac --authenticationDatabase food_maniac --ssl --sslPEMKeyFile /etc/ssl/mongodb.pem --sslCAFile /etc/ssl/mongodb-cert.crt --sslAllowInvalidHostnames




---------------------------------------------------------------
                manual actions with curl
---------------------------------------------------------------

Create user:
curl -X POST http://0.0.0.0:9000/users -i -d "email=test@example.com&password=123456&access_token=S9EqDPByR2z5mnCMaRFk7b552RWaFcnn"
curl -X POST http://51.254.221.25:8080/users -i -d "email=test@example.com&password=123456&access_token=S9EqDPByR2z5mnCMaRFk7b552RWaFcnn"


Login user:
curl -X POST http://0.0.0.0:9000/auth -i -u test@example.com:123456 -d "access_token=S9EqDPByR2z5mnCMaRFk7b552RWaFcnn"

See articles (not working):
curl -X POST http://0.0.0.0:9000/articles -i -d "title=Awesome Article&content=Yeah Baby&access_token=S9EqDPByR2z5mnCMaRFk7b552RWaFcnn"

View categ:
curl -X GET http://0.0.0.0:9000/categories -i -d "access_token=TOKEN"
curl -X GET http://0.0.0.0:9000/categories -i -d "access_token=TOKEN"



---------------------------------------------------------------
                SSL with letsencrypt certbot
---------------------------------------------------------------

Did not do this:
  sudo apt install letsencrypt

Instead:

- Renew Letsencrypt certificate:
    - Ssh on the server
    - pm2 stop all
    - sudo systemctl stop nginx
    - /opt/letsencrypt/letsencrypt-auto renew
    - pm2 start all
    result (ceritificate) is there: /etc/letsencrypt/live/food-maniac.com/fullchain.pem 

- Creation process:
    - sudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt
    - cd /opt/letsencrypt
    - sudo systemctl stop nginx
    - ./letsencrypt-auto certonly â€“standalone
    - sudo nano /etc/nginx/sites-enabled/default
    - sudo systemctl start nginx


- Use of certbot:
    - sudo add-apt-repository ppa:certbot/certbot
    - sudo apt-get update
    - sudo apt-get install python-certbot-nginx
    - list of existing certificates and expiration dates: sudo certbot certificates

    


---------------------------------------------------------------
                            nginx
---------------------------------------------------------------


cd /etc/nginx/
more nginx.conf

        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;

IMPORTANT NOTE ON ADDING PATHES TO THE SERVER: look comment in boServer.js


---------------------- Logs & debug ---------------

LOG file here: /var/log/nginx
sudo less /var/log/nginx/error.log


Test BoServer (NOT nginx) accessible locally, from server machine: curl localhost:8085/api



------------------  To restart nginx  ------------

/etc/init.d/nginx restart


------------------ File: sudo nano /etc/nginx/sites-available/default ------------------

# HTTP - redirect all requests to HTTPS:
server {
        listen 80;
        listen [::]:80 default_server ipv6only=on;
        return 301 https://$host$request_uri;
}

# HTTPS - proxy requests on to local Node.js app:
server {
        listen 443;
        server_name food-maniac.com;

        ssl on;
        # Use certificate and key provided by Let's Encrypt:
        ssl_certificate /etc/letsencrypt/live/food-maniac.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/food-maniac.com/privkey.pem;
        ssl_session_timeout 5m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';


        # Pass requests for /api to localhost:8085:
        location /api/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/api/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }

        # Pass requests for /util to localhost:8085:
        location /util/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/util/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }

        # Pass requests for /socket.io to localhost:8085:
        location /socket.io/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/socket.io/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }
        
        # Pass requests for /static to localhost:8085:
        location /static/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/static/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }
        
        # Pass requests for /logs to localhost:8085:
        location /logs/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/logs/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }

        # Pass requests for / to localhost:8080:
        location / {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8080/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }
}




---------------------------------------------------------------
          UNIX useful commands
---------------------------------------------------------------

List files by size (S: size, r:reverse):
ls -lSr

List files over a certain size:
find . -size +100M

List & delete files over a certain size:
find . -size +100M -delete

Disk usage (include folder sizes and grand total. -s: summary for each file, -h: human readable, -c: total)
du -s -h -c *












